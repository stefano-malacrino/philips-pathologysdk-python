from enum import Enum
from typing import Annotated, BinaryIO, ClassVar, overload
from typing_extensions import Buffer

class PixelEngine:
    class BufferType(Enum):
        LUMINANCE = int
        RGB = int
        RGBA = int

    class DataEnvelopes:
        def __eq__(self, other: PixelEngine.DataEnvelopes) -> bool: ...
        def as_extreme_vertices_model(
            self,
        ) -> list[tuple[list[int], list[list[int]]]]: ...
        def as_rectangles(self) -> list[list[int]]: ...

    class DisplayView(PixelEngine.SourceView):
        color_correction_black_point: float
        color_correction_gamma: float
        color_correction_white_point: float
        color_gain: float
        contrast_clip_limit: float
        sharpness: float

    class ISyntaxFacade:
        acquisition_datetime: str
        barcode: str
        date_of_last_calibration: list[str]
        derivation_description: str
        device_serial_number: str
        manufacturer: str
        model_name: str
        scanner_calibration_status: str
        scanner_operator_id: str
        scanner_rack_number: int
        scanner_rack_priority: int
        scanner_slot_number: int
        software_versions: list[str]
        time_of_last_calibration: list[str]

        @overload
        def __getitem__(self, index: int) -> PixelEngine.SubImage: ...
        @overload
        def __getitem__(self, type: str) -> PixelEngine.SubImage: ...
        def close(self) -> int: ...
        @overload
        def open(
            self,
            url: str,
            container_name: str = "",
            mode: str = "r",
            cache_name: str = "",
        ) -> None: ...
        @overload
        def open(
            self,
            stream: BinaryIO,
            container_name: str = "",
            mode: str = "r",
            cache_name: str = "",
        ) -> None: ...
        @property
        def id(self) -> str: ...
        @property
        def is_UFS(self) -> bool: ...
        @property
        def is_UFSb(self) -> bool: ...
        @property
        def is_UVS(self) -> bool: ...
        @property
        def is_philips(self) -> bool: ...
        @property
        def isyntax_file_version(self) -> str: ...
        @property
        def num_images(self) -> int: ...

    class Level:
        def chain_source_view(
            self, view: PixelEngine.View, x_shift: int, y_shift: int, level_shift: int
        ) -> None: ...
        def filter_width(
            self, coord: list[int], dimensions: list[int], filter_kernel_half_width: int
        ) -> list[Annotated[list[int], 2]]: ...

    class Region:
        def __eq__(self, other: PixelEngine.Region) -> bool: ...
        def __ge__(self, other: PixelEngine.Region) -> bool: ...
        def __gt__(self, other: PixelEngine.Region) -> bool: ...
        def __hash__(self) -> int: ...
        def __le__(self, other: PixelEngine.Region) -> bool: ...
        def __lt__(self, other: PixelEngine.Region) -> bool: ...
        def draw(self, target: int = 0) -> None: ...
        def get(self, buffer: Buffer) -> int: ...
        @property
        def range(self) -> list[int]: ...
        @property
        def ready(self) -> bool: ...

    class SourceView(PixelEngine.View):
        def load_default_parameters(self) -> None: ...
        def truncation(
            self, enabled: bool, rounding: bool, trunc_levels: dict[int, list[int]]
        ) -> None: ...

    class SubImage:
        color_linearity: str
        icc_profile: str
        lossy_image_compression: str
        lossy_image_compression_method: str
        lossy_image_compression_ratio: float

        def block_pos(self, block_ind: int) -> list[int]: ...
        def block_size(self, template_id: int = 0) -> list[int]: ...
        def read_block(self, buffer: Buffer) -> int: ...
        @property
        def colorspace_transform(self) -> str: ...
        @property
        def compressor(self) -> str: ...
        @property
        def display_view(self) -> PixelEngine.DisplayView: ...
        @property
        def has_display_view(self) -> bool: ...
        @property
        def image_data(self) -> memoryview: ...
        @image_data.setter
        def image_data(self, data: Buffer) -> None: ...
        @property
        def image_type(self) -> str: ...
        @property
        def num_tiles(self) -> int: ...
        @property
        def pixel_transform(self) -> str: ...
        @property
        def quality(self) -> int: ...
        @property
        def source_view(self) -> PixelEngine.SourceView: ...

    class View:
        def __getitem__(self, level: int) -> PixelEngine.Level: ...
        def chain_source_view(
            self, view: PixelEngine.View, x_shift: int, y_shift: int, level_shift: int
        ) -> None: ...
        def data_envelopes(self, level: int) -> PixelEngine.DataEnvelopes: ...
        def dimension_ranges(self, level: int) -> list[Annotated[list[int], 3]]: ...
        @overload
        def request_regions(
            self,
            regions: list[list[int]],
            enable_async_rendering: bool = True,
            background_color: list[int] = [0, 0, 0],
            buffer_type: PixelEngine.BufferType = ...,
        ) -> list[PixelEngine.Region]: ...
        @overload
        def request_regions(
            self,
            regions: list[list[int]],
            data_envelopes: PixelEngine.DataEnvelopes,
            enable_async_rendering: bool = True,
            background_color: list[int] = [0, 0, 0],
            buffer_type: PixelEngine.BufferType = ...,
        ) -> list[PixelEngine.Region]: ...
        @property
        def bits_allocated(self) -> int: ...
        @property
        def bits_stored(self) -> int: ...
        @property
        def dimension_discrete_values(self) -> list[list[str]]: ...
        @property
        def dimension_names(self) -> list[str]: ...
        @property
        def dimension_types(self) -> list[str]: ...
        @property
        def dimension_units(self) -> list[str]: ...
        @property
        def high_bit(self) -> int: ...
        @property
        def id(self) -> int: ...
        @property
        def num_derived_levels(self) -> int: ...
        @property
        def origin(self) -> list[float]: ...
        @property
        def pixel_representation(self) -> int: ...
        @property
        def pixel_size(self) -> list[int]: ...
        @property
        def planar_configuration(self) -> int: ...
        @property
        def samples_per_pixel(self) -> int: ...
        @property
        def scale(self) -> list[float]: ...

    version: ClassVar[str]
    certificates: str
    network_timeout: int
    rate_limiting: bool

    def __getitem__(self, name: str) -> PixelEngine.ISyntaxFacade: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, render_backend: RenderBackend, render_context: RenderContext
    ) -> None: ...
    def block_sizes(self, pixel_transform: str) -> list[str]: ...
    def clear_render_buffers(self) -> None: ...
    def clear_render_cache(self) -> None: ...
    def clear_render_target(self, color: list[int], target: int = 0) -> None: ...
    def colorspace_transforms(self) -> list[str]: ...
    def compressors(self) -> list[str]: ...
    def container_version(self, container: str) -> str: ...
    def containers(self) -> list[str]: ...
    def pixel_transforms(self) -> list[str]: ...
    def quality_presets(self) -> list[str]: ...
    def wait_all(self, regions: list[PixelEngine.Region]) -> None: ...
    @overload
    def wait_any(self) -> list[PixelEngine.Region]: ...
    @overload
    def wait_any(
        self, regions: list[PixelEngine.Region]
    ) -> list[PixelEngine.Region]: ...
    @property
    def client_certificates(
        self,
    ) -> Annotated[list[str], 3]: ...
    @client_certificates.setter
    def client_certificates(self, certs: tuple[str, str, str]) -> None: ...

class RenderBackend:
    class ImageFormatType(Enum):
        LUMINANCE = int
        RGB = int
        RGBA = int
        UNDEFINED_FORMAT = int

class RenderContext:
    def __init__(self) -> None: ...
    @property
    def height(self) -> int: ...
    @property
    def width(self) -> int: ...
